{
  "name": "react-tag-input",
  "version": "4.3.3",
  "description": "React tags is a fantastically simple tagging component for your React projects",
  "main": "dist-modules/reactTags.js",
  "scripts": {
    "test": "mocha test/.setup.js test/**/*-test.js",
    "test-watch": "mocha --watch test/.setup.js test/**/*-test.js",
    "dev": "webpack-dev-server --hot --progress --colors --watch --display-error-details --content-base ./",
    "build": "webpack -p && babel lib --out-dir dist-modules"
  },
  "keywords": [
    "react",
    "drag-drop",
    "tags",
    "tag input",
    "react-component",
    "autosuggest"
  ],
  "author": {
    "name": "Prakhar Srivastav"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/prakhar1989/react-tags"
  },
  "dependencies": {
    "lodash.flow": "^3.3.0",
    "react-dnd": "^2.0.2",
    "react-dnd-html5-backend": "^2.0.0"
  },
  "peerDependencies": {
    "react": "^0.14.0 || ^15.0.0-rc",
    "react-dom": "^0.14.0 || ^15.0.0-rc"
  },
  "devDependencies": {
    "react": "^15.1.0",
    "react-dom": "^15.1.0",
    "babel-cli": "^6.9.0",
    "babel-core": "^6.0.20",
    "babel-eslint": "^4.1.3",
    "babel-loader": "^6.0.1",
    "babel-preset-es2015": "^6.0.15",
    "babel-preset-react": "^6.0.15",
    "babel-preset-stage-0": "^6.0.15",
    "babel-register": "^6.9.0",
    "chai": "^3.5.0",
    "enzyme": "^2.3.0",
    "jsdom": "^9.4.0",
    "lodash": "4.14.1",
    "mocha": "^2.5.3",
    "react-addons-test-utils": "^15.1.0",
    "react-dnd-test-backend": "^1.0.2",
    "sinon": "^1.17.4",
    "webpack": "^1.13.1",
    "webpack-dev-server": "^1.14.1"
  },
  "engines": {
    "node": ">=5.0.0"
  },
  "readme": "React-Tags\n===\n\n[![MIT](https://img.shields.io/npm/l/react-tag-input.svg?style=flat-square)](https://github.com/prakhar1989/react-tags/blob/master/LICENSE)\n[![NPM Version](https://img.shields.io/npm/v/react-tag-input.svg?style=flat-square)](https://www.npmjs.com/package/react-tag-input)\n[![npm downloads](https://img.shields.io/npm/dm/react-tag-input.svg?style=flat-square)](https://www.npmjs.com/package/react-tag-input)\n[![build status](https://img.shields.io/travis/prakhar1989/react-tags.svg?style=flat-square)](https://travis-ci.org/prakhar1989/react-tags)\n\nReact-tags is a simple tagging component ready to drop in your React projects. The component is inspired by GMail's *To* field in the compose window.\n\n### Features\n- Autocomplete based on a suggestion list\n- Keyboard friendly and mouse support\n- Reorder tags using drag and drop\n\n### Why\nBecause I was looking for an excuse to build a standalone component and publish it in the wild? To be honest, I needed a tagging component that provided the above features for my [React-Surveyman](http://github.com/prakhar1989/react-surveyman) project. Since I was unable to find one which met my requirements (and the fact that I generally enjoy re-inventing the wheel) this is what I came up with.\n\n\n### Demo\n![img](demo.gif)\n\nCheck it out [here](http://prakhar.me/react-tags/example)\n\n### Installation\nThe preferred way of using the component is via NPM\n\n```\nnpm install --save react-tag-input\n```\nIt is, however, also available to be used separately (`dist/ReactTags.min.js`). If you prefer this method remember to include [ReactDND](https://github.com/gaearon/react-dnd) as a dependancy. Refer to the [demo](http://prakhar.me/react-tags/example) to see how this works.\n\n### Usage\n\nHere's a sample implementation that initializes the component with a list of initial `tags` and `suggestions` list. Apart from this, there are multiple events, handlers for which need to be set. For more details, go through the [API](#Options).\n\nYou can also play with live code on [WebpackBin](http://www.webpackbin.com/41DVgMvv-).\n\n```javascript\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { WithContext as ReactTags } from 'react-tag-input';\n\nconst App = React.createClass({\n    getInitialState() {\n        return {\n            tags: [ {id: 1, text: \"Apples\"} ],\n            suggestions: [\"Banana\", \"Mango\", \"Pear\", \"Apricot\"]\n        }\n    },\n    handleDelete(i) {\n        let tags = this.state.tags;\n        tags.splice(i, 1);\n        this.setState({tags: tags});\n    },\n    handleAddition(tag) {\n        let tags = this.state.tags;\n        tags.push({\n            id: tags.length + 1,\n            text: tag\n        });\n        this.setState({tags: tags});\n    },\n    handleDrag(tag, currPos, newPos) {\n        let tags = this.state.tags;\n\n        // mutate array\n        tags.splice(currPos, 1);\n        tags.splice(newPos, 0, tag);\n\n        // re-render\n        this.setState({ tags: tags });\n    },\n    render() {\n        let tags = this.state.tags;\n        let suggestions = this.state.suggestions;\n        return (\n            <div>\n                <ReactTags tags={tags}\n                    suggestions={suggestions}\n                    handleDelete={this.handleDelete}\n                    handleAddition={this.handleAddition}\n                    handleDrag={this.handleDrag} />\n            </div>\n        )\n    }\n});\n\nReactDOM.render(<App />, document.getElementById('app'));\n```\n\n**A note about `Contexts`**\nOne of the dependencies of this component is the [react-dnd](https://github.com/gaearon/react-dnd) library. Since the 1.0 version, the original author has changed the API and requires the application using any draggable components to have a top-level [backend](http://gaearon.github.io/react-dnd/docs-html5-backend.html) context. So if you're using this component in an existing Application that uses React-DND you will already have a backend defined, in which case, you should `require` the component *without* the context.\n\n```javascript\nconst ReactTags = require('react-tag-input').WithOutContext;\n```\nOtherwise, you can simply import along with the backend itself (as shown above). If you have ideas to make this API better, I'd [love to hear](https://github.com/prakhar1989/react-tags/issues/new).\n\n<a name=\"Options\"></a>\n### Options\n\n- [`tags`](#tagsOption)\n- [`suggestions`](#suggestionsOption)\n- [`delimiters`](#delimiters)\n- [`placeholder`](#placeholderOption)\n- [`labelField`](#labelFieldOption)\n- [`handleAddition`](#handleAdditionOption)\n- [`handleDelete`](#handleDeleteOption)\n- [`handleDrag`](#handleDragOption)\n- [`handleFilterSuggestions`](#handleFilterSuggestions)\n- [`autofocus`](#autofocus)\n- [`allowDeleteFromEmptyInput`](#allowDeleteFromEmptyInput)\n- [`handleInputChange`](#handleInputChange)\n- [`handleInputBlur`](#handleInputBlur)\n- [`minQueryLength`](#minQueryLength)\n- [`removeComponent`](#removeComponent)\n- [`autocomplete`](#autocomplete)\n- [`readOnly`](#readOnly)\n\n<a name=\"tagsOption\"></a>\n##### tags (optional)\nAn array of tags that are displayed as pre-selected. Each tag should have an `id` and a `text` property which is used to display.\n\n```js\nlet tags =  [ {id: 1, text: \"Apples\"} ]\n```\n\n<a name=\"suggestionsOption\"></a>\n##### suggestions (optional)\nAn array of suggestions that are used as basis for showing suggestions. At the moment, this should be an array of strings.\n\n```js\nlet suggestions = [\"mango\", \"pineapple\", \"orange\", \"pear\"];\n```\n\n<a name=\"delimiters\"></a>\n##### delimiters (optional)\nSpecifies which characters should terminate tags input (default: enter and tab). A list of character codes.\n\n\n<a name=\"placeholderOption\"></a>\n##### placeholder (optional)\nThe placeholder shown for the input. Defaults to `Add new tag`.\n\n```\nlet placeholder = \"Add new country\"\n```\n\n<a name=\"labelFieldOption\"></a>\n##### labelField (optional)\nProvide an alternative `label` property for the tags. Defaults to `text`.\n\n```\n<ReactTags tags={tags}\n    suggestions={}\n    labelField={'name'}\n    handleDrag={} />\n```\nThis is useful if your data uses the `text` property for something else.\n\n\n<a name=\"handleAdditionOption\"></a>\n##### handleAddition (required)\nFunction called when the user wants to add a tag (either a click, a tab press or carriage return)\n\n```js\nfunction(tag) {\n    // add the tag to the tag list\n}\n```\n\n<a name=\"handleDeleteOption\"></a>\n##### handleDelete (required)\nFunction called when the user wants to delete a tag\n\n```js\nfunction(i) {\n    // delete the tag at index i\n}\n```\n\n<a name=\"handleDragOption\"></a>\n##### handleDrag (optional)\nIf you want tags to be draggable, you need to provide this function.\nFunction called when the user drags a tag.\n\n```js\nfunction(tag, currPos, newPos) {\n    // remove tag from currPos and add in newPos\n}\n```\n\n<a name=\"handleFilterSuggestions\"></a>\n##### handleFilterSuggestions (optional)\nTo assert control over the suggestions filter, you may contribute a function that is executed whenever a filtered set\nof suggestions is expected. By default, the text input value will be matched against each suggestion, and [those that\n**start with** the entered text][default-suggestions-filter-logic] will be included in the filters suggestions list. If you do contribute a custom filter\nfunction, you must return an array of suggestions. Please do not mutate the passed suggestions array.\n\nFor example, if you prefer to override the default filter behavior and instead match any suggestions that contain\nthe entered text _anywhere_ in the suggestion, your `handleFilterSuggestions` property may look like this:\n\n```js\nfunction(textInputValue, possibleSuggestionsArray) {\n    var lowerCaseQuery = textInputValue.toLowerCase()\n\n    return possibleSuggestionsArray.filter(function(suggestion)  {\n        return suggestion.toLowerCase().includes(lowerCaseQuery)\n    })\n}\n```\n\nNote: The above custom filter uses `String.prototype.includes`, which was added to JavaScript as part of the ECMAScript 7\nspecification. If you need to support a browser that does not yet include support for this method, you will need to\neither refactor the above filter based on the capabilities of your supported browsers, or import a [polyfill for\n`String.prototype.includes`][includes-polyfill].\n\n<a name=\"autofocus\"></a>\n##### autofocus (optional)\nOptional boolean param to control whether the text-input should be autofocused on mount.\n\n```js\n<ReactTags\n    autofocus={false}\n    ...>        \n```\n\n<a name=\"allowDeleteFromEmptyInput\"></a>\n##### allowDeleteFromEmptyInput (optional)\nOptional boolean param to control whether tags should be deleted when the 'Delete' key is pressed in an empty Input Box.\n\n```js\n<ReactTags\n    allowDeleteFromEmptyInput={false}\n    ...>\n```\n\n<a name=\"handleInputChange\"></a>\n##### handleInputChange (optional)\nOptional event handler for input onChange\n\n```js\n<ReactTags\n    handleInputChange={this.handleInputChange}\n    ...>\n```\n\n<a name=\"handleInputBlur\"></a>\n##### handleInputBlur (optional)\nOptional event handler for input onBlur\n\n```js\n<ReactTags\n    handleInputBlur={this.handleInputBlur}\n    ...>\n```\n\n<a name=\"minQueryLength\"></a>\n##### minQueryLength (optional)\nHow many characters are needed for suggestions to appear (default: 2).\n\n<a name=\"removeComponent\"></a>\n##### removeComponent (optional)\nIf you'd like to supply your own tag delete/remove element, create a React component and pass it as a property to ReactTags using the `removeComponent` option. By default, a simple anchor link with an \"x\" text node as its only child is rendered, but if you'd like to, say, replace this with a `<button>` element that uses an image instead of text, your markup may look something like this:\n\n```javascript\nimport {WithContext as ReactTags} from 'react-tag-input'\n\nclass Foo extends React.Component {\n   render() {\n      return <ReactTags removeComponent={RemoveComponent}/>\n   }\n}\n\nclass RemoveComponent extends React.Component {\n   render() {\n      return (\n         <button {...this.props}>\n            <img src=\"my-icon.png\" />\n         </button>\n      )\n   }\n}\n```\n\nThe \"ReactTags__remove\" className and `onClick` handler properties can be automatically included on the `<button>` by using the [JSX spread attribute](https://facebook.github.io/react/docs/jsx-spread.html), as illustrated above.\n\n<a name=\"autocomplete\"></a>\n##### autocomplete (optional)\nUseful for enhancing data entry workflows for your users by ensuring the first matching suggestion is automatically converted to a tag when a [delimiter](#delimiters) key is pressed (such as the enter key). This option has three possible values:\n\n- `true` - when delimeter key (such as enter) is pressed, first matching suggestion is used.\n- `1` - when delimeter key (such as enter) is pressed, matching suggestion is used only if there is a single matching suggestion\n- `false` (default) - tags are not autocompleted on enter/delimiter\n\nThis option has no effect if there are no [`suggestions`](#suggestionsOption).\n\n<a name=\"readOnly\"></a>\n##### readOnly (optional)\nRenders the component in read-only mode without the input box and `removeComponent`. This also disables the drag-n-drop feature.\n\n### Styling\n`<ReactTags>` does not come up with any styles. However, it is very easy to customize the look of the component the way you want it. By default, the component provides the following classes with which you can style -\n\n- `ReactTags__tags`\n- `ReactTags__tagInput`\n- `ReactTags__selected`\n- `ReactTags__selected ReactTags__tag`\n- `ReactTags__selected ReactTags__remove`\n- `ReactTags__suggestions`\n\nAn example can be found in `/example/reactTags.css`.\n\nIf you need to set your own class names on the component, you may pass in\na `classNames` prop.\n\n```js\n  <ReactTags\n    classNames={{\n      tags: 'tagsClass',\n      tagInput: 'tagInputClass',\n      selected: 'selectedClass',\n      tag: 'tagClass',\n      remove: 'removeClass',\n      suggestions: 'suggestionsClass'\n    }}\n    ...>\n```\n\n\n### Dev\nThe component is written in ES6 and uses [Webpack](http://webpack.github.io/) as its build tool.\n```\nnpm install\nnpm run dev\n# open http://localhost:8090/example/index.html\n```\n\n### Contributing\nGot ideas on how to make this better? Open an issue!\n\n### Thanks\nThe autocomplete dropdown is inspired by Lea Verou's [awesomeplete](https://github.com/LeaVerou/awesomplete) library. The Drag and drop functionality is provided by Dan Abramov's insanely useful [ReactDND](https://github.com/gaearon/react-dnd) library.\n\nAlso thanks to the awesome contributors who've made the library far better!\n\n\n[default-suggestions-filter-logic]: https://github.com/prakhar1989/react-tags/blob/v4.0.1/lib/ReactTags.js#L83\n[includes-polyfill]: https://github.com/mathiasbynens/String.prototype.includes\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/prakhar1989/react-tags/issues"
  },
  "_id": "react-tag-input@4.3.3",
  "dist": {
    "shasum": "08b421c6b3dd108ddb04cb3145081dbfb5ed9e14"
  },
  "_from": "react-tag-input@latest",
  "_resolved": "https://registry.npmjs.org/react-tag-input/-/react-tag-input-4.3.3.tgz"
}
